{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# To-Do List:\n",
    "\n",
    "# Access RDS YES\n",
    "\n",
    "# Send all the data to s3 in proper folders NOT WORTH IT\n",
    "\n",
    "# Create recordio files from folders in s3 YES\n",
    "\n",
    "# Run it NOT YET"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#DOWNLOAD IM2REC.PY\n",
    "\n",
    "import os\n",
    "import urllib.request\n",
    "\n",
    "def download(url):\n",
    "    filename = url.split(\"/\")[-1]\n",
    "    if not os.path.exists(filename):\n",
    "        urllib.request.urlretrieve(url, filename)\n",
    "        \n",
    "download('https://raw.githubusercontent.com/apache/incubator-mxnet/master/tools/im2rec.py')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:sagemaker:Couldn't call 'get_role' to get Role ARN from role name SageMakerAll to get Role path.\n"
     ]
    }
   ],
   "source": [
    "# SETUP\n",
    "\n",
    "bucket = 'nicu-data'\n",
    "\n",
    "import boto3\n",
    "import re\n",
    "from sagemaker.amazon.amazon_estimator import get_image_uri\n",
    "from sagemaker import get_execution_role\n",
    "role = get_execution_role()\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import sagemaker\n",
    "from sagemaker.predictor import csv_serializer \n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import roc_auc_score\n",
    "import matplotlib.pyplot as plt  \n",
    "from sqlalchemy import create_engine\n",
    "\n",
    "s3 = boto3.client('s3')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pymysql in /home/ec2-user/anaconda3/envs/mxnet_p36/lib/python3.6/site-packages (0.9.3)\n",
      "\u001b[33mYou are using pip version 10.0.1, however version 19.0.3 is available.\n",
      "You should consider upgrading via the 'pip install --upgrade pip' command.\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "# Download pymysql\n",
    "import sys\n",
    "!{sys.executable} -m pip install pymysql"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Connect to the database\n",
    "db_engine = create_engine('mysql+pymysql://isaiah:nicu_isaiah@nicu-2019-03-05.c2lckhwrw1as.us-east-1.rds.amazonaws.com:3306/nicu')\n",
    "connection = db_engine.connect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create Folders in S3\n",
    "\n",
    "#boto3.Session().resource('s3').Bucket(bucket).Object('databasefiles/recording_id{}/jimmy.txt'.format(1)).upload_file('jimmy.txt')\n",
    "#boto3.Session().resource('s3').Bucket(bucket).Object('databasefiles/recording_id_{}/howdy.txt'.format(1)).upload_file('howdy.txt')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "160\n"
     ]
    }
   ],
   "source": [
    "#Work with 10 Rows\n",
    "\n",
    "# query data from database\n",
    "query1 = (\" SELECT Raw.isCSGM, Raw.recording_id, Raw.timestamp, Raw.RGB_frame \"\n",
    "         \" FROM Video_Raw Raw \"\n",
    "         \" WHERE Raw.recording_id = 2 \"\n",
    "         \" ORDER BY Raw.timestamp \"\n",
    "         \" LIMIT 40 \")\n",
    "\n",
    "query2 = (\" SELECT Raw.isCSGM, Raw.recording_id, Raw.timestamp, Raw.RGB_frame \"\n",
    "         \" FROM Video_Raw Raw \"\n",
    "         \" WHERE Raw.recording_id = 3 \"\n",
    "         \" ORDER BY Raw.timestamp \"\n",
    "         \" LIMIT 40 \")\n",
    "\n",
    "query3 = (\" SELECT Raw.isCSGM, Raw.recording_id, Raw.timestamp, Raw.RGB_frame \"\n",
    "         \" FROM Video_Raw Raw \"\n",
    "         \" WHERE Raw.recording_id = 4 \"\n",
    "         \" ORDER BY Raw.timestamp \"\n",
    "         \" LIMIT 40 \")\n",
    "\n",
    "query4 = (\" SELECT Raw.isCSGM, Raw.recording_id, Raw.timestamp, Raw.RGB_frame \"\n",
    "         \" FROM Video_Raw Raw \"\n",
    "         \" WHERE Raw.recording_id = 4 \"\n",
    "         \" ORDER BY Raw.timestamp \"\n",
    "         \" LIMIT 40 \")\n",
    "\n",
    "# data_df is a dataframe\n",
    "data_df = pd.read_sql(query1, connection).values\n",
    "data_df = np.append(data_df,pd.read_sql(query2,connection).values)\n",
    "data_df = np.append(data_df,pd.read_sql(query3,connection).values)\n",
    "data_df = np.append(data_df,pd.read_sql(query4,connection).values)\n",
    "\n",
    "\n",
    "#print (data_df)   \n",
    "    \n",
    "# Get the count in the database\n",
    "#query_for_count = (\" SELECT COUNT(Raw.id) count \"\n",
    "#                   \" FROM Video_Raw Raw \"\n",
    "#                   \" WHERE Raw.id > 11 AND Raw.id < 22 \")\n",
    "#count = pd.read_sql(query_for_count, connection).values.item(0)\n",
    "count = int(data_df.size/4)\n",
    "print(count)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# USEFUL REMOVE COMMAND AND FUNCTION\n",
    "\n",
    "# REMOVE ALL FILES\n",
    "\n",
    "import shutil\n",
    "shutil.rmtree(\"PNGfiles\")\n",
    "\n",
    "\n",
    "# REMOVE ALL LST FILES\n",
    "\n",
    "#import os\n",
    "#def scandirs(path):\n",
    "#    for root, dirs, files in os.walk(path):\n",
    "#        for currentFile in files:\n",
    "#            exts = ('.lst', '.rec', '.idx')\n",
    "#            if currentFile.lower().endswith(exts):\n",
    "#                os.remove(os.path.join(root, currentFile))\n",
    "#scandirs(\"PNGfiles\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import os.path\n",
    "\n",
    "# CREATE AND POPULATE FOLDERS WITH DB DATA\n",
    "path = \"PNGfiles\"\n",
    "os.mkdir(path)\n",
    "for k in range(2,14):\n",
    "    os.mkdir(\"{}/recording_id_{}\".format(path, k))\n",
    "    os.mkdir(\"{}/recording_id_{}/isCSGM\".format(path, k))\n",
    "    os.mkdir(\"{}/recording_id_{}/noCSGM\".format(path, k))\n",
    "       \n",
    "for i in range(0, (count)*4, 4):\n",
    "    csgm = data_df.item(i)\n",
    "    rec_id = data_df.item(i+1)\n",
    "    time = str(data_df.item(i+2))\n",
    "    png = data_df.item(i+3)\n",
    "    # if non-csgm, then send png file to all folders except for the single folder that excludes that baby\n",
    "    if csgm == 0:\n",
    "        for j in range(2,14):\n",
    "            if rec_id != j:\n",
    "                folder = \"{}/recording_id_{}/noCSGM\".format(path, j) #create folder pathname for the png file\n",
    "                filename = os.path.join(folder, \"{}_%s.png\".format(rec_id) % (time))\n",
    "                fh = open(filename, \"wb\")\n",
    "                fh.write(png)\n",
    "                fh.close()\n",
    "    if csgm == 1:\n",
    "        for j in range(2,14):\n",
    "            if rec_id != j:\n",
    "                folder = \"{}/recording_id_{}/isCSGM\".format(path, j) #create folder pathname for the png file\n",
    "                filename = os.path.join(folder, \"{}_%s.png\".format(rec_id) % (time))\n",
    "                fh = open(filename, \"wb\")\n",
    "                fh.write(png)\n",
    "                fh.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "noCSGM 0\n",
      "Creating .rec file from /home/ec2-user/SageMaker/PNGfiles/recording_id_2/2_train.lst in /home/ec2-user/SageMaker/PNGfiles/recording_id_2\n",
      "time: 0.020406246185302734  count: 0\n",
      "Creating .rec file from /home/ec2-user/SageMaker/PNGfiles/recording_id_2/2_val.lst in /home/ec2-user/SageMaker/PNGfiles/recording_id_2\n",
      "time: 0.022074460983276367  count: 0\n",
      "Completed 256.0 KiB/2.2 MiB (3.7 MiB/s) with 1 file(s) remaining\r",
      "Completed 512.0 KiB/2.2 MiB (6.8 MiB/s) with 1 file(s) remaining\r",
      "Completed 768.0 KiB/2.2 MiB (9.6 MiB/s) with 1 file(s) remaining\r",
      "Completed 1.0 MiB/2.2 MiB (12.3 MiB/s) with 1 file(s) remaining \r",
      "Completed 1.2 MiB/2.2 MiB (14.6 MiB/s) with 1 file(s) remaining \r",
      "Completed 1.5 MiB/2.2 MiB (16.7 MiB/s) with 1 file(s) remaining \r",
      "Completed 1.8 MiB/2.2 MiB (18.8 MiB/s) with 1 file(s) remaining \r",
      "Completed 2.0 MiB/2.2 MiB (21.0 MiB/s) with 1 file(s) remaining \r",
      "Completed 2.2 MiB/2.2 MiB (17.3 MiB/s) with 1 file(s) remaining \r",
      "upload: PNGfiles/recording_id_2/2_train.rec to s3://nicu-data/recfiles/train/recording_id_2/2_train.rec\n",
      "Completed 256.0 KiB/949.1 KiB (5.4 MiB/s) with 1 file(s) remaining\r",
      "Completed 512.0 KiB/949.1 KiB (9.5 MiB/s) with 1 file(s) remaining\r",
      "Completed 768.0 KiB/949.1 KiB (13.1 MiB/s) with 1 file(s) remaining\r",
      "Completed 949.1 KiB/949.1 KiB (7.5 MiB/s) with 1 file(s) remaining \r",
      "upload: PNGfiles/recording_id_2/2_val.rec to s3://nicu-data/recfiles/validation/recording_id_2/2_val.rec\n",
      "noCSGM 0\n",
      "Creating .rec file from /home/ec2-user/SageMaker/PNGfiles/recording_id_3/3_train.lst in /home/ec2-user/SageMaker/PNGfiles/recording_id_3\n",
      "time: 0.015760183334350586  count: 0\n",
      "Creating .rec file from /home/ec2-user/SageMaker/PNGfiles/recording_id_3/3_val.lst in /home/ec2-user/SageMaker/PNGfiles/recording_id_3\n",
      "time: 0.020651817321777344  count: 0\n",
      "Completed 256.0 KiB/1.9 MiB (1.9 MiB/s) with 1 file(s) remaining\r",
      "Completed 512.0 KiB/1.9 MiB (3.8 MiB/s) with 1 file(s) remaining\r",
      "Completed 768.0 KiB/1.9 MiB (5.6 MiB/s) with 1 file(s) remaining\r",
      "Completed 1.0 MiB/1.9 MiB (7.3 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.2 MiB/1.9 MiB (9.0 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.5 MiB/1.9 MiB (10.6 MiB/s) with 1 file(s) remaining \r",
      "Completed 1.8 MiB/1.9 MiB (12.3 MiB/s) with 1 file(s) remaining \r",
      "Completed 1.9 MiB/1.9 MiB (6.2 MiB/s) with 1 file(s) remaining  \r",
      "upload: PNGfiles/recording_id_3/3_train.rec to s3://nicu-data/recfiles/train/recording_id_3/3_train.rec\n",
      "Completed 256.0 KiB/828.5 KiB (7.0 MiB/s) with 1 file(s) remaining\r",
      "Completed 512.0 KiB/828.5 KiB (13.1 MiB/s) with 1 file(s) remaining\r",
      "Completed 768.0 KiB/828.5 KiB (18.5 MiB/s) with 1 file(s) remaining\r",
      "Completed 828.5 KiB/828.5 KiB (7.6 MiB/s) with 1 file(s) remaining \r",
      "upload: PNGfiles/recording_id_3/3_val.rec to s3://nicu-data/recfiles/validation/recording_id_3/3_val.rec\n",
      "noCSGM 0\n",
      "Creating .rec file from /home/ec2-user/SageMaker/PNGfiles/recording_id_4/4_val.lst in /home/ec2-user/SageMaker/PNGfiles/recording_id_4\n",
      "time: 0.023430824279785156  count: 0\n",
      "Creating .rec file from /home/ec2-user/SageMaker/PNGfiles/recording_id_4/4_train.lst in /home/ec2-user/SageMaker/PNGfiles/recording_id_4\n",
      "time: 0.02777886390686035  count: 0\n",
      "Completed 256.0 KiB/2.8 MiB (5.1 MiB/s) with 1 file(s) remaining\r",
      "Completed 512.0 KiB/2.8 MiB (8.8 MiB/s) with 1 file(s) remaining\r",
      "Completed 768.0 KiB/2.8 MiB (12.4 MiB/s) with 1 file(s) remaining\r",
      "Completed 1.0 MiB/2.8 MiB (15.5 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.2 MiB/2.8 MiB (18.5 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.5 MiB/2.8 MiB (21.2 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.8 MiB/2.8 MiB (23.9 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.0 MiB/2.8 MiB (26.5 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.2 MiB/2.8 MiB (29.0 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.5 MiB/2.8 MiB (31.3 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.8 MiB/2.8 MiB (33.5 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.8 MiB/2.8 MiB (18.5 MiB/s) with 1 file(s) remaining  \r",
      "upload: PNGfiles/recording_id_4/4_train.rec to s3://nicu-data/recfiles/train/recording_id_4/4_train.rec\n",
      "Completed 256.0 KiB/1.2 MiB (5.5 MiB/s) with 1 file(s) remaining\r",
      "Completed 512.0 KiB/1.2 MiB (9.6 MiB/s) with 1 file(s) remaining\r",
      "Completed 768.0 KiB/1.2 MiB (13.1 MiB/s) with 1 file(s) remaining\r",
      "Completed 1.0 MiB/1.2 MiB (16.5 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.2 MiB/1.2 MiB (13.3 MiB/s) with 1 file(s) remaining  \r",
      "upload: PNGfiles/recording_id_4/4_val.rec to s3://nicu-data/recfiles/validation/recording_id_4/4_val.rec\n",
      "noCSGM 0\n",
      "Creating .rec file from /home/ec2-user/SageMaker/PNGfiles/recording_id_5/5_val.lst in /home/ec2-user/SageMaker/PNGfiles/recording_id_5\n",
      "time: 0.033373117446899414  count: 0\n",
      "Creating .rec file from /home/ec2-user/SageMaker/PNGfiles/recording_id_5/5_train.lst in /home/ec2-user/SageMaker/PNGfiles/recording_id_5\n",
      "time: 0.019710779190063477  count: 0\n",
      "Completed 256.0 KiB/3.5 MiB (3.6 MiB/s) with 1 file(s) remaining\r",
      "Completed 512.0 KiB/3.5 MiB (6.8 MiB/s) with 1 file(s) remaining\r",
      "Completed 768.0 KiB/3.5 MiB (9.7 MiB/s) with 1 file(s) remaining\r",
      "Completed 1.0 MiB/3.5 MiB (12.5 MiB/s) with 1 file(s) remaining \r",
      "Completed 1.2 MiB/3.5 MiB (15.3 MiB/s) with 1 file(s) remaining \r",
      "Completed 1.5 MiB/3.5 MiB (17.9 MiB/s) with 1 file(s) remaining \r",
      "Completed 1.8 MiB/3.5 MiB (20.4 MiB/s) with 1 file(s) remaining \r",
      "Completed 2.0 MiB/3.5 MiB (22.8 MiB/s) with 1 file(s) remaining \r",
      "Completed 2.2 MiB/3.5 MiB (25.2 MiB/s) with 1 file(s) remaining \r",
      "Completed 2.5 MiB/3.5 MiB (27.4 MiB/s) with 1 file(s) remaining \r",
      "Completed 2.8 MiB/3.5 MiB (29.6 MiB/s) with 1 file(s) remaining \r",
      "Completed 3.0 MiB/3.5 MiB (31.8 MiB/s) with 1 file(s) remaining \r",
      "Completed 3.2 MiB/3.5 MiB (33.9 MiB/s) with 1 file(s) remaining \r",
      "Completed 3.5 MiB/3.5 MiB (36.0 MiB/s) with 1 file(s) remaining \r",
      "Completed 3.5 MiB/3.5 MiB (20.5 MiB/s) with 1 file(s) remaining \r",
      "upload: PNGfiles/recording_id_5/5_train.rec to s3://nicu-data/recfiles/train/recording_id_5/5_train.rec\n",
      "Completed 256.0 KiB/1.4 MiB (5.9 MiB/s) with 1 file(s) remaining\r",
      "Completed 512.0 KiB/1.4 MiB (10.7 MiB/s) with 1 file(s) remaining\r",
      "Completed 768.0 KiB/1.4 MiB (14.8 MiB/s) with 1 file(s) remaining\r",
      "Completed 1.0 MiB/1.4 MiB (19.0 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.2 MiB/1.4 MiB (22.5 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.4 MiB/1.4 MiB (16.4 MiB/s) with 1 file(s) remaining  \r",
      "upload: PNGfiles/recording_id_5/5_val.rec to s3://nicu-data/recfiles/validation/recording_id_5/5_val.rec\n",
      "noCSGM 0\n",
      "Creating .rec file from /home/ec2-user/SageMaker/PNGfiles/recording_id_6/6_val.lst in /home/ec2-user/SageMaker/PNGfiles/recording_id_6\n",
      "time: 0.019479751586914062  count: 0\n",
      "Creating .rec file from /home/ec2-user/SageMaker/PNGfiles/recording_id_6/6_train.lst in /home/ec2-user/SageMaker/PNGfiles/recording_id_6\n",
      "time: 0.026113510131835938  count: 0\n",
      "Completed 256.0 KiB/3.5 MiB (4.9 MiB/s) with 1 file(s) remaining\r",
      "Completed 512.0 KiB/3.5 MiB (8.8 MiB/s) with 1 file(s) remaining\r",
      "Completed 768.0 KiB/3.5 MiB (12.1 MiB/s) with 1 file(s) remaining\r",
      "Completed 1.0 MiB/3.5 MiB (15.2 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.2 MiB/3.5 MiB (18.2 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.5 MiB/3.5 MiB (20.8 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.8 MiB/3.5 MiB (23.5 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.0 MiB/3.5 MiB (26.0 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.2 MiB/3.5 MiB (28.4 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.5 MiB/3.5 MiB (30.7 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.8 MiB/3.5 MiB (32.9 MiB/s) with 1 file(s) remaining  \r",
      "Completed 3.0 MiB/3.5 MiB (35.2 MiB/s) with 1 file(s) remaining  \r",
      "Completed 3.2 MiB/3.5 MiB (37.2 MiB/s) with 1 file(s) remaining  \r",
      "Completed 3.5 MiB/3.5 MiB (39.4 MiB/s) with 1 file(s) remaining  \r",
      "Completed 3.5 MiB/3.5 MiB (23.8 MiB/s) with 1 file(s) remaining  \r",
      "upload: PNGfiles/recording_id_6/6_train.rec to s3://nicu-data/recfiles/train/recording_id_6/6_train.rec\n",
      "Completed 256.0 KiB/1.4 MiB (5.4 MiB/s) with 1 file(s) remaining\r",
      "Completed 512.0 KiB/1.4 MiB (9.2 MiB/s) with 1 file(s) remaining\r",
      "Completed 768.0 KiB/1.4 MiB (12.4 MiB/s) with 1 file(s) remaining\r",
      "Completed 1.0 MiB/1.4 MiB (15.2 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.2 MiB/1.4 MiB (18.1 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.4 MiB/1.4 MiB (7.1 MiB/s) with 1 file(s) remaining   \r",
      "upload: PNGfiles/recording_id_6/6_val.rec to s3://nicu-data/recfiles/validation/recording_id_6/6_val.rec\n",
      "noCSGM 0\n",
      "Creating .rec file from /home/ec2-user/SageMaker/PNGfiles/recording_id_7/7_val.lst in /home/ec2-user/SageMaker/PNGfiles/recording_id_7\n",
      "time: 0.023541927337646484  count: 0\n",
      "Creating .rec file from /home/ec2-user/SageMaker/PNGfiles/recording_id_7/7_train.lst in /home/ec2-user/SageMaker/PNGfiles/recording_id_7\n",
      "time: 0.027796268463134766  count: 0\n",
      "Completed 256.0 KiB/3.5 MiB (4.8 MiB/s) with 1 file(s) remaining\r",
      "Completed 512.0 KiB/3.5 MiB (8.3 MiB/s) with 1 file(s) remaining\r",
      "Completed 768.0 KiB/3.5 MiB (11.3 MiB/s) with 1 file(s) remaining\r",
      "Completed 1.0 MiB/3.5 MiB (14.2 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.2 MiB/3.5 MiB (16.9 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.5 MiB/3.5 MiB (19.3 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.8 MiB/3.5 MiB (21.6 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.0 MiB/3.5 MiB (24.0 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.2 MiB/3.5 MiB (26.1 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.5 MiB/3.5 MiB (28.2 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.8 MiB/3.5 MiB (30.3 MiB/s) with 1 file(s) remaining  \r",
      "Completed 3.0 MiB/3.5 MiB (32.2 MiB/s) with 1 file(s) remaining  \r",
      "Completed 3.2 MiB/3.5 MiB (34.2 MiB/s) with 1 file(s) remaining  \r",
      "Completed 3.5 MiB/3.5 MiB (35.9 MiB/s) with 1 file(s) remaining  \r",
      "Completed 3.5 MiB/3.5 MiB (20.0 MiB/s) with 1 file(s) remaining  \r",
      "upload: PNGfiles/recording_id_7/7_train.rec to s3://nicu-data/recfiles/train/recording_id_7/7_train.rec\n",
      "Completed 256.0 KiB/1.4 MiB (5.1 MiB/s) with 1 file(s) remaining\r",
      "Completed 512.0 KiB/1.4 MiB (8.8 MiB/s) with 1 file(s) remaining\r",
      "Completed 768.0 KiB/1.4 MiB (11.9 MiB/s) with 1 file(s) remaining\r",
      "Completed 1.0 MiB/1.4 MiB (14.9 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.2 MiB/1.4 MiB (17.7 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.4 MiB/1.4 MiB (8.9 MiB/s) with 1 file(s) remaining   \r",
      "upload: PNGfiles/recording_id_7/7_val.rec to s3://nicu-data/recfiles/validation/recording_id_7/7_val.rec\n",
      "noCSGM 0\n",
      "Creating .rec file from /home/ec2-user/SageMaker/PNGfiles/recording_id_8/8_train.lst in /home/ec2-user/SageMaker/PNGfiles/recording_id_8\n",
      "time: 0.02247333526611328  count: 0\n",
      "Creating .rec file from /home/ec2-user/SageMaker/PNGfiles/recording_id_8/8_val.lst in /home/ec2-user/SageMaker/PNGfiles/recording_id_8\n",
      "time: 0.022539377212524414  count: 0\n",
      "Completed 256.0 KiB/3.5 MiB (5.0 MiB/s) with 1 file(s) remaining\r",
      "Completed 512.0 KiB/3.5 MiB (9.2 MiB/s) with 1 file(s) remaining\r",
      "Completed 768.0 KiB/3.5 MiB (12.9 MiB/s) with 1 file(s) remaining\r",
      "Completed 1.0 MiB/3.5 MiB (16.4 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.2 MiB/3.5 MiB (19.7 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.5 MiB/3.5 MiB (22.6 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.8 MiB/3.5 MiB (25.6 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.0 MiB/3.5 MiB (28.3 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.2 MiB/3.5 MiB (31.0 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.5 MiB/3.5 MiB (33.5 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.8 MiB/3.5 MiB (35.7 MiB/s) with 1 file(s) remaining  \r",
      "Completed 3.0 MiB/3.5 MiB (38.4 MiB/s) with 1 file(s) remaining  \r",
      "Completed 3.2 MiB/3.5 MiB (40.8 MiB/s) with 1 file(s) remaining  \r",
      "Completed 3.5 MiB/3.5 MiB (42.9 MiB/s) with 1 file(s) remaining  \r",
      "Completed 3.5 MiB/3.5 MiB (23.3 MiB/s) with 1 file(s) remaining  \r",
      "upload: PNGfiles/recording_id_8/8_train.rec to s3://nicu-data/recfiles/train/recording_id_8/8_train.rec\n",
      "Completed 256.0 KiB/1.4 MiB (5.0 MiB/s) with 1 file(s) remaining\r",
      "Completed 512.0 KiB/1.4 MiB (8.6 MiB/s) with 1 file(s) remaining\r",
      "Completed 768.0 KiB/1.4 MiB (11.5 MiB/s) with 1 file(s) remaining\r",
      "Completed 1.0 MiB/1.4 MiB (14.1 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.2 MiB/1.4 MiB (16.6 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.4 MiB/1.4 MiB (10.2 MiB/s) with 1 file(s) remaining  \r",
      "upload: PNGfiles/recording_id_8/8_val.rec to s3://nicu-data/recfiles/validation/recording_id_8/8_val.rec\n",
      "noCSGM 0\n",
      "Creating .rec file from /home/ec2-user/SageMaker/PNGfiles/recording_id_9/9_train.lst in /home/ec2-user/SageMaker/PNGfiles/recording_id_9\n",
      "time: 0.024420738220214844  count: 0\n",
      "Creating .rec file from /home/ec2-user/SageMaker/PNGfiles/recording_id_9/9_val.lst in /home/ec2-user/SageMaker/PNGfiles/recording_id_9\n",
      "time: 0.023553848266601562  count: 0\n",
      "Completed 256.0 KiB/3.5 MiB (4.2 MiB/s) with 1 file(s) remaining\r",
      "Completed 512.0 KiB/3.5 MiB (7.5 MiB/s) with 1 file(s) remaining\r",
      "Completed 768.0 KiB/3.5 MiB (10.3 MiB/s) with 1 file(s) remaining\r",
      "Completed 1.0 MiB/3.5 MiB (13.0 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.2 MiB/3.5 MiB (15.3 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.5 MiB/3.5 MiB (17.5 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.8 MiB/3.5 MiB (19.8 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.0 MiB/3.5 MiB (21.8 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.2 MiB/3.5 MiB (23.8 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.5 MiB/3.5 MiB (25.8 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.8 MiB/3.5 MiB (27.5 MiB/s) with 1 file(s) remaining  \r",
      "Completed 3.0 MiB/3.5 MiB (29.4 MiB/s) with 1 file(s) remaining  \r",
      "Completed 3.2 MiB/3.5 MiB (31.0 MiB/s) with 1 file(s) remaining  \r",
      "Completed 3.5 MiB/3.5 MiB (32.9 MiB/s) with 1 file(s) remaining  \r",
      "Completed 3.5 MiB/3.5 MiB (17.8 MiB/s) with 1 file(s) remaining  \r",
      "upload: PNGfiles/recording_id_9/9_train.rec to s3://nicu-data/recfiles/train/recording_id_9/9_train.rec\n",
      "Completed 256.0 KiB/1.4 MiB (4.9 MiB/s) with 1 file(s) remaining\r",
      "Completed 512.0 KiB/1.4 MiB (8.5 MiB/s) with 1 file(s) remaining\r",
      "Completed 768.0 KiB/1.4 MiB (11.6 MiB/s) with 1 file(s) remaining\r",
      "Completed 1.0 MiB/1.4 MiB (14.5 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.2 MiB/1.4 MiB (17.2 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.4 MiB/1.4 MiB (8.8 MiB/s) with 1 file(s) remaining   \r",
      "upload: PNGfiles/recording_id_9/9_val.rec to s3://nicu-data/recfiles/validation/recording_id_9/9_val.rec\n",
      "noCSGM 0\n",
      "Creating .rec file from /home/ec2-user/SageMaker/PNGfiles/recording_id_10/10_train.lst in /home/ec2-user/SageMaker/PNGfiles/recording_id_10\n",
      "time: 0.02205038070678711  count: 0\n",
      "Creating .rec file from /home/ec2-user/SageMaker/PNGfiles/recording_id_10/10_val.lst in /home/ec2-user/SageMaker/PNGfiles/recording_id_10\n",
      "time: 0.032961130142211914  count: 0\n",
      "Completed 256.0 KiB/3.5 MiB (4.7 MiB/s) with 1 file(s) remaining\r",
      "Completed 512.0 KiB/3.5 MiB (8.0 MiB/s) with 1 file(s) remaining\r",
      "Completed 768.0 KiB/3.5 MiB (11.2 MiB/s) with 1 file(s) remaining\r",
      "Completed 1.0 MiB/3.5 MiB (14.1 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.2 MiB/3.5 MiB (16.8 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.5 MiB/3.5 MiB (19.0 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.8 MiB/3.5 MiB (21.0 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.0 MiB/3.5 MiB (23.2 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.2 MiB/3.5 MiB (25.1 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.5 MiB/3.5 MiB (27.0 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.8 MiB/3.5 MiB (29.1 MiB/s) with 1 file(s) remaining  \r",
      "Completed 3.0 MiB/3.5 MiB (30.5 MiB/s) with 1 file(s) remaining  \r",
      "Completed 3.2 MiB/3.5 MiB (32.3 MiB/s) with 1 file(s) remaining  \r",
      "Completed 3.5 MiB/3.5 MiB (34.2 MiB/s) with 1 file(s) remaining  \r",
      "Completed 3.5 MiB/3.5 MiB (16.7 MiB/s) with 1 file(s) remaining  \r",
      "upload: PNGfiles/recording_id_10/10_train.rec to s3://nicu-data/recfiles/train/recording_id_10/10_train.rec\n",
      "Completed 256.0 KiB/1.4 MiB (1.6 MiB/s) with 1 file(s) remaining\r",
      "Completed 512.0 KiB/1.4 MiB (3.0 MiB/s) with 1 file(s) remaining\r",
      "Completed 768.0 KiB/1.4 MiB (4.4 MiB/s) with 1 file(s) remaining\r",
      "Completed 1.0 MiB/1.4 MiB (5.7 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.2 MiB/1.4 MiB (7.0 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.4 MiB/1.4 MiB (4.2 MiB/s) with 1 file(s) remaining  \r",
      "upload: PNGfiles/recording_id_10/10_val.rec to s3://nicu-data/recfiles/validation/recording_id_10/10_val.rec\n",
      "noCSGM 0\n",
      "Creating .rec file from /home/ec2-user/SageMaker/PNGfiles/recording_id_11/11_val.lst in /home/ec2-user/SageMaker/PNGfiles/recording_id_11\n",
      "time: 0.021714210510253906  count: 0\n",
      "Creating .rec file from /home/ec2-user/SageMaker/PNGfiles/recording_id_11/11_train.lst in /home/ec2-user/SageMaker/PNGfiles/recording_id_11\n",
      "time: 0.021483898162841797  count: 0\n",
      "Completed 256.0 KiB/3.5 MiB (3.3 MiB/s) with 1 file(s) remaining\r",
      "Completed 512.0 KiB/3.5 MiB (6.4 MiB/s) with 1 file(s) remaining\r",
      "Completed 768.0 KiB/3.5 MiB (9.3 MiB/s) with 1 file(s) remaining\r",
      "Completed 1.0 MiB/3.5 MiB (12.2 MiB/s) with 1 file(s) remaining \r",
      "Completed 1.2 MiB/3.5 MiB (14.8 MiB/s) with 1 file(s) remaining \r",
      "Completed 1.5 MiB/3.5 MiB (17.4 MiB/s) with 1 file(s) remaining \r",
      "Completed 1.8 MiB/3.5 MiB (19.9 MiB/s) with 1 file(s) remaining \r",
      "Completed 2.0 MiB/3.5 MiB (22.2 MiB/s) with 1 file(s) remaining \r",
      "Completed 2.2 MiB/3.5 MiB (24.6 MiB/s) with 1 file(s) remaining \r",
      "Completed 2.5 MiB/3.5 MiB (26.8 MiB/s) with 1 file(s) remaining \r",
      "Completed 2.8 MiB/3.5 MiB (29.1 MiB/s) with 1 file(s) remaining \r",
      "Completed 3.0 MiB/3.5 MiB (31.2 MiB/s) with 1 file(s) remaining \r",
      "Completed 3.2 MiB/3.5 MiB (33.4 MiB/s) with 1 file(s) remaining \r",
      "Completed 3.5 MiB/3.5 MiB (35.5 MiB/s) with 1 file(s) remaining \r",
      "Completed 3.5 MiB/3.5 MiB (19.3 MiB/s) with 1 file(s) remaining \r",
      "upload: PNGfiles/recording_id_11/11_train.rec to s3://nicu-data/recfiles/train/recording_id_11/11_train.rec\n",
      "Completed 256.0 KiB/1.4 MiB (3.7 MiB/s) with 1 file(s) remaining\r",
      "Completed 512.0 KiB/1.4 MiB (6.6 MiB/s) with 1 file(s) remaining\r",
      "Completed 768.0 KiB/1.4 MiB (9.4 MiB/s) with 1 file(s) remaining\r",
      "Completed 1.0 MiB/1.4 MiB (12.1 MiB/s) with 1 file(s) remaining \r",
      "Completed 1.2 MiB/1.4 MiB (14.5 MiB/s) with 1 file(s) remaining \r",
      "Completed 1.4 MiB/1.4 MiB (5.2 MiB/s) with 1 file(s) remaining  \r",
      "upload: PNGfiles/recording_id_11/11_val.rec to s3://nicu-data/recfiles/validation/recording_id_11/11_val.rec\n",
      "noCSGM 0\n",
      "Creating .rec file from /home/ec2-user/SageMaker/PNGfiles/recording_id_12/12_val.lst in /home/ec2-user/SageMaker/PNGfiles/recording_id_12\n",
      "time: 0.029720783233642578  count: 0\n",
      "Creating .rec file from /home/ec2-user/SageMaker/PNGfiles/recording_id_12/12_train.lst in /home/ec2-user/SageMaker/PNGfiles/recording_id_12\n",
      "time: 0.022577285766601562  count: 0\n",
      "Completed 256.0 KiB/3.5 MiB (4.9 MiB/s) with 1 file(s) remaining\r",
      "Completed 512.0 KiB/3.5 MiB (8.7 MiB/s) with 1 file(s) remaining\r",
      "Completed 768.0 KiB/3.5 MiB (12.0 MiB/s) with 1 file(s) remaining\r",
      "Completed 1.0 MiB/3.5 MiB (15.0 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.2 MiB/3.5 MiB (17.8 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.5 MiB/3.5 MiB (20.6 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.8 MiB/3.5 MiB (23.1 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.0 MiB/3.5 MiB (25.5 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.2 MiB/3.5 MiB (27.9 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.5 MiB/3.5 MiB (30.0 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.8 MiB/3.5 MiB (32.3 MiB/s) with 1 file(s) remaining  \r",
      "Completed 3.0 MiB/3.5 MiB (34.5 MiB/s) with 1 file(s) remaining  \r",
      "Completed 3.2 MiB/3.5 MiB (36.5 MiB/s) with 1 file(s) remaining  \r",
      "Completed 3.5 MiB/3.5 MiB (38.5 MiB/s) with 1 file(s) remaining  \r",
      "Completed 3.5 MiB/3.5 MiB (24.3 MiB/s) with 1 file(s) remaining  \r",
      "upload: PNGfiles/recording_id_12/12_train.rec to s3://nicu-data/recfiles/train/recording_id_12/12_train.rec\n",
      "Completed 256.0 KiB/1.4 MiB (6.2 MiB/s) with 1 file(s) remaining\r",
      "Completed 512.0 KiB/1.4 MiB (10.9 MiB/s) with 1 file(s) remaining\r",
      "Completed 768.0 KiB/1.4 MiB (14.8 MiB/s) with 1 file(s) remaining\r",
      "Completed 1.0 MiB/1.4 MiB (18.1 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.2 MiB/1.4 MiB (21.5 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.4 MiB/1.4 MiB (13.2 MiB/s) with 1 file(s) remaining  \r",
      "upload: PNGfiles/recording_id_12/12_val.rec to s3://nicu-data/recfiles/validation/recording_id_12/12_val.rec\n",
      "noCSGM 0\n",
      "Creating .rec file from /home/ec2-user/SageMaker/PNGfiles/recording_id_13/13_val.lst in /home/ec2-user/SageMaker/PNGfiles/recording_id_13\n",
      "time: 0.032387495040893555  count: 0\n",
      "Creating .rec file from /home/ec2-user/SageMaker/PNGfiles/recording_id_13/13_train.lst in /home/ec2-user/SageMaker/PNGfiles/recording_id_13\n",
      "time: 0.02205061912536621  count: 0\n",
      "Completed 256.0 KiB/3.5 MiB (5.4 MiB/s) with 1 file(s) remaining\r",
      "Completed 512.0 KiB/3.5 MiB (10.1 MiB/s) with 1 file(s) remaining\r",
      "Completed 768.0 KiB/3.5 MiB (14.5 MiB/s) with 1 file(s) remaining\r",
      "Completed 1.0 MiB/3.5 MiB (18.6 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.2 MiB/3.5 MiB (22.5 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.5 MiB/3.5 MiB (26.2 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.8 MiB/3.5 MiB (29.8 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.0 MiB/3.5 MiB (33.2 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.2 MiB/3.5 MiB (36.7 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.5 MiB/3.5 MiB (39.1 MiB/s) with 1 file(s) remaining  \r",
      "Completed 2.8 MiB/3.5 MiB (41.5 MiB/s) with 1 file(s) remaining  \r",
      "Completed 3.0 MiB/3.5 MiB (43.2 MiB/s) with 1 file(s) remaining  \r",
      "Completed 3.2 MiB/3.5 MiB (45.9 MiB/s) with 1 file(s) remaining  \r",
      "Completed 3.5 MiB/3.5 MiB (48.5 MiB/s) with 1 file(s) remaining  \r",
      "Completed 3.5 MiB/3.5 MiB (26.8 MiB/s) with 1 file(s) remaining  \r",
      "upload: PNGfiles/recording_id_13/13_train.rec to s3://nicu-data/recfiles/train/recording_id_13/13_train.rec\n",
      "Completed 256.0 KiB/1.4 MiB (5.0 MiB/s) with 1 file(s) remaining\r",
      "Completed 512.0 KiB/1.4 MiB (8.7 MiB/s) with 1 file(s) remaining\r",
      "Completed 768.0 KiB/1.4 MiB (11.9 MiB/s) with 1 file(s) remaining\r",
      "Completed 1.0 MiB/1.4 MiB (15.0 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.2 MiB/1.4 MiB (17.9 MiB/s) with 1 file(s) remaining  \r",
      "Completed 1.4 MiB/1.4 MiB (11.0 MiB/s) with 1 file(s) remaining  \r",
      "upload: PNGfiles/recording_id_13/13_val.rec to s3://nicu-data/recfiles/validation/recording_id_13/13_val.rec\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "#CREATE REC FILES AND SEND TO S3 STORAGE\n",
    "\n",
    "rec_ids=(2 3 4 5 6 7 8 9 10 11 12 13)\n",
    "for t in ${rec_ids[@]}\n",
    "do\n",
    "    python3 im2rec.py --list --recursive --train-ratio 0.7 \"$t\" \"PNGfiles/recording_id_$t\" #(prefix, directory)\n",
    "    mv \"$t\"_train.lst \"PNGfiles/recording_id_$t\"\n",
    "    mv \"$t\"_val.lst \"PNGfiles/recording_id_$t\"\n",
    "    python3 im2rec.py --resize 240 --quality 95 --num-thread 16 \"PNGfiles/recording_id_$t\" \"PNGfiles/recording_id_$t\" #(prefix, directory)\n",
    "    ! aws s3 cp PNGfiles/recording_id_\"$t\"/\"$t\"_train.rec s3://nicu-data/recfiles/train/recording_id_\"$t/\"\n",
    "    ! aws s3 cp PNGfiles/recording_id_\"$t\"/\"$t\"_val.rec s3://nicu-data/recfiles/validation/recording_id_\"$t/\"\n",
    "done\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:sagemaker:Couldn't call 'get_role' to get Role ARN from role name SageMakerAll to get Role path.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This Run is for: 2\n",
      "Training job current status: InProgress\n",
      "Training job ended with status: Completed\n",
      "Training job ended with status: Completed\n",
      "image-classification-nicu-2--2019-04-30-01-03-06\n",
      "s3://nicu-data/image-classification-nicu/output/image-classification-nicu-2019-04-30-00-57-05-2/output/model.tar.gz\n",
      "arn:aws:sagemaker:us-east-1:571256666132:model/image-classification-nicu-2--2019-04-30-01-03-06\n",
      "Endpoint configuration name: image-classification-nicu-epc--2019-04-30-01-03-06\n",
      "Endpoint configuration arn:  arn:aws:sagemaker:us-east-1:571256666132:endpoint-config/image-classification-nicu-epc--2019-04-30-01-03-06\n",
      "Endpoint name: image-classification-nicu-ep--2019-04-30-01-03-07\n",
      "EndpointArn = arn:aws:sagemaker:us-east-1:571256666132:endpoint/image-classification-nicu-ep--2019-04-30-01-03-07\n",
      "EndpointStatus = Creating\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:sagemaker:Couldn't call 'get_role' to get Role ARN from role name SageMakerAll to get Role path.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Endpoint creation ended with EndpointStatus = InService\n",
      "This Run is for: 3\n",
      "Training job current status: InProgress\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:sagemaker:Couldn't call 'get_role' to get Role ARN from role name SageMakerAll to get Role path.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Endpoint creation ended with EndpointStatus = InService\n",
      "This Run is for: 11\n",
      "Training job current status: InProgress\n",
      "Training job ended with status: Completed\n",
      "Training job ended with status: Completed\n",
      "image-classification-nicu-11--2019-04-30-03-17-11\n",
      "s3://nicu-data/image-classification-nicu/output/image-classification-nicu-2019-04-30-03-11-10-11/output/model.tar.gz\n",
      "arn:aws:sagemaker:us-east-1:571256666132:model/image-classification-nicu-11--2019-04-30-03-17-11\n",
      "Endpoint configuration name: image-classification-nicu-epc--2019-04-30-03-17-11\n",
      "Endpoint configuration arn:  arn:aws:sagemaker:us-east-1:571256666132:endpoint-config/image-classification-nicu-epc--2019-04-30-03-17-11\n",
      "Endpoint name: image-classification-nicu-ep--2019-04-30-03-17-11\n",
      "EndpointArn = arn:aws:sagemaker:us-east-1:571256666132:endpoint/image-classification-nicu-ep--2019-04-30-03-17-11\n",
      "EndpointStatus = Creating\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:sagemaker:Couldn't call 'get_role' to get Role ARN from role name SageMakerAll to get Role path.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Endpoint creation ended with EndpointStatus = InService\n",
      "This Run is for: 12\n",
      "Training job current status: InProgress\n",
      "Training job ended with status: Completed\n",
      "Training job ended with status: Completed\n",
      "image-classification-nicu-12--2019-04-30-03-32-15\n",
      "s3://nicu-data/image-classification-nicu/output/image-classification-nicu-2019-04-30-03-26-14-12/output/model.tar.gz\n",
      "arn:aws:sagemaker:us-east-1:571256666132:model/image-classification-nicu-12--2019-04-30-03-32-15\n",
      "Endpoint configuration name: image-classification-nicu-epc--2019-04-30-03-32-15\n",
      "Endpoint configuration arn:  arn:aws:sagemaker:us-east-1:571256666132:endpoint-config/image-classification-nicu-epc--2019-04-30-03-32-15\n",
      "Endpoint name: image-classification-nicu-ep--2019-04-30-03-32-15\n",
      "EndpointArn = arn:aws:sagemaker:us-east-1:571256666132:endpoint/image-classification-nicu-ep--2019-04-30-03-32-15\n",
      "EndpointStatus = Creating\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:sagemaker:Couldn't call 'get_role' to get Role ARN from role name SageMakerAll to get Role path.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Endpoint creation ended with EndpointStatus = InService\n",
      "This Run is for: 13\n",
      "Training job current status: InProgress\n",
      "Training job ended with status: Completed\n",
      "Training job ended with status: Completed\n",
      "image-classification-nicu-13--2019-04-30-03-47-49\n",
      "s3://nicu-data/image-classification-nicu/output/image-classification-nicu-2019-04-30-03-41-48-13/output/model.tar.gz\n",
      "arn:aws:sagemaker:us-east-1:571256666132:model/image-classification-nicu-13--2019-04-30-03-47-49\n",
      "Endpoint configuration name: image-classification-nicu-epc--2019-04-30-03-47-49\n",
      "Endpoint configuration arn:  arn:aws:sagemaker:us-east-1:571256666132:endpoint-config/image-classification-nicu-epc--2019-04-30-03-47-49\n",
      "Endpoint name: image-classification-nicu-ep--2019-04-30-03-47-50\n",
      "EndpointArn = arn:aws:sagemaker:us-east-1:571256666132:endpoint/image-classification-nicu-ep--2019-04-30-03-47-50\n",
      "EndpointStatus = Creating\n",
      "Endpoint creation ended with EndpointStatus = InService\n",
      "CPU times: user 6.23 s, sys: 299 ms, total: 6.53 s\n",
      "Wall time: 2h 59min 16s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "import time\n",
    "import boto3\n",
    "import re\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.ticker as ticker\n",
    "import numpy as np\n",
    "from sagemaker import get_execution_role\n",
    "from time import gmtime, strftime\n",
    "\n",
    "#LOOP\n",
    "\n",
    "for baby in range(2, 14):\n",
    "    print ('This Run is for: {}'.format(baby))\n",
    "    valfile = \"/home/ec2-user/SageMaker/PNGfiles/recording_id_{}/{}_val.lst\".format(baby, baby)\n",
    "    trainfile = \"/home/ec2-user/SageMaker/PNGfiles/recording_id_{}/{}_train.lst\".format(baby, baby)\n",
    "    \n",
    "    valcount = 0\n",
    "    traincount = 0\n",
    "    \n",
    "    with open(valfile) as infp:\n",
    "        for line in infp:\n",
    "           if line.strip():\n",
    "              valcount += 1\n",
    "                \n",
    "    with open(trainfile) as infp:\n",
    "        for line in infp:\n",
    "           if line.strip():\n",
    "              traincount += 1\n",
    "\n",
    "\n",
    "    #SET-UP\n",
    "\n",
    "    role = get_execution_role()\n",
    "    s3 = boto3.client('s3')\n",
    "    bucket = 'nicu-data' # customize to your bucket\n",
    "\n",
    "    containers = {'us-west-2': '433757028032.dkr.ecr.us-west-2.amazonaws.com/image-classification:latest',\n",
    "                  'us-east-1': '811284229777.dkr.ecr.us-east-1.amazonaws.com/image-classification:latest',\n",
    "                  'us-east-2': '825641698319.dkr.ecr.us-east-2.amazonaws.com/image-classification:latest',\n",
    "                  'eu-west-1': '685385470294.dkr.ecr.eu-west-1.amazonaws.com/image-classification:latest'}\n",
    "    training_image = containers[boto3.Session().region_name]\n",
    "\n",
    "    #------------------------------------------------------------\n",
    "    #PARAMETERS\n",
    "\n",
    "    # The algorithm supports multiple network depth (number of layers). They are 18, 34, 50, 101, 152 and 200\n",
    "    # For this training, we will use 18 layers\n",
    "    num_layers = 18\n",
    "    # we need to specify the input image shape for the training data\n",
    "    image_shape = \"3,240,240\"\n",
    "    # we also need to specify the number of training samples in the training set\n",
    "    num_training_samples = valcount + traincount\n",
    "    # specify the number of output classes\n",
    "    num_classes = 4\n",
    "    # batch size for training\n",
    "    mini_batch_size =  32\n",
    "    # number of epochs\n",
    "    epochs = 10\n",
    "    # learning rate\n",
    "    learning_rate = 0.01\n",
    "\n",
    "    #------------------------------------------------------------\n",
    "    #SETTING UP THE PARAMETERS\n",
    "\n",
    "    # create unique job name \n",
    "    job_name_prefix = 'image-classification-nicu'\n",
    "    timestamp = time.strftime('-%Y-%m-%d-%H-%M-%S', time.gmtime())\n",
    "    job_name = job_name_prefix + timestamp + (\"-{}\".format(baby))\n",
    "    training_params = \\\n",
    "    {\n",
    "        # specify the training docker image\n",
    "        \"AlgorithmSpecification\": {\n",
    "            \"TrainingImage\": training_image,\n",
    "            \"TrainingInputMode\": \"File\"\n",
    "        },\n",
    "        \"RoleArn\": role,\n",
    "        \"OutputDataConfig\": {\n",
    "            \"S3OutputPath\": 's3://{}/{}/output'.format(bucket, job_name_prefix)\n",
    "        },\n",
    "        \"ResourceConfig\": {\n",
    "            \"InstanceCount\": 1,\n",
    "            \"InstanceType\": \"ml.p2.xlarge\",\n",
    "            \"VolumeSizeInGB\": 50\n",
    "        },\n",
    "        \"TrainingJobName\": job_name,\n",
    "        \"HyperParameters\": {\n",
    "            \"image_shape\": image_shape,\n",
    "            \"num_layers\": str(num_layers),\n",
    "            \"num_training_samples\": str(num_training_samples),\n",
    "            \"num_classes\": str(num_classes),\n",
    "            \"mini_batch_size\": str(mini_batch_size),\n",
    "            \"epochs\": str(epochs),\n",
    "            \"learning_rate\": str(learning_rate)\n",
    "        },\n",
    "        \"StoppingCondition\": {\n",
    "            \"MaxRuntimeInSeconds\": 360000\n",
    "        },\n",
    "    #Training data should be inside a subdirectory called \"train\"\n",
    "    #Validation data should be inside a subdirectory called \"validation\"\n",
    "    #The algorithm currently only supports fullyreplicated model (where data is copied onto each machine)\n",
    "        \"InputDataConfig\": [\n",
    "            {\n",
    "                \"ChannelName\": \"train\",\n",
    "                \"DataSource\": {\n",
    "                    \"S3DataSource\": {\n",
    "                        \"S3DataType\": \"S3Prefix\",\n",
    "                        \"S3Uri\": 's3://{}/recfiles/train/recording_id_{}'.format(bucket, baby),\n",
    "                        \"S3DataDistributionType\": \"FullyReplicated\"\n",
    "                    }\n",
    "                },\n",
    "                \"ContentType\": \"application/x-recordio\",\n",
    "                \"CompressionType\": \"None\"\n",
    "            },\n",
    "            {\n",
    "                \"ChannelName\": \"validation\",\n",
    "                \"DataSource\": {\n",
    "                    \"S3DataSource\": {\n",
    "                        \"S3DataType\": \"S3Prefix\",\n",
    "                        \"S3Uri\": 's3://{}/recfiles/validation/recording_id_{}'.format(bucket, baby),\n",
    "                        \"S3DataDistributionType\": \"FullyReplicated\"\n",
    "                    }\n",
    "                },\n",
    "                \"ContentType\": \"application/x-recordio\",\n",
    "                \"CompressionType\": \"None\"\n",
    "            }\n",
    "        ]\n",
    "    }\n",
    "\n",
    "    #------------------------------------------------------------\n",
    "    #TRAINING JOB\n",
    "\n",
    "    sagemaker = boto3.client(service_name='sagemaker')\n",
    "    sagemaker.create_training_job(**training_params)\n",
    "\n",
    "    # confirm that the training job has started\n",
    "    status = sagemaker.describe_training_job(TrainingJobName=job_name)['TrainingJobStatus']\n",
    "    print('Training job current status: {}'.format(status))\n",
    "\n",
    "    try:\n",
    "        # wait for the job to finish and report the ending status\n",
    "        sagemaker.get_waiter('training_job_completed_or_stopped').wait(TrainingJobName=job_name)\n",
    "        training_info = sagemaker.describe_training_job(TrainingJobName=job_name)\n",
    "        status = training_info['TrainingJobStatus']\n",
    "        print(\"Training job ended with status: \" + status)\n",
    "    except:\n",
    "        print('Training failed to start')\n",
    "         # if exception is raised, that means it has failed\n",
    "        message = sagemaker.describe_training_job(TrainingJobName=job_name)['FailureReason']\n",
    "        print('Training failed with the following error: {}'.format(message))\n",
    "\n",
    "    training_info = sagemaker.describe_training_job(TrainingJobName=job_name)\n",
    "    status = training_info['TrainingJobStatus']\n",
    "    print(\"Training job ended with status: \" + status)\n",
    "\n",
    "    #-----------------------------------------------------------\n",
    "    #CREATING THE MODEL\n",
    "\n",
    "    sage = boto3.Session().client(service_name='sagemaker') \n",
    "\n",
    "    model_name=\"image-classification-nicu-{}-{}\".format(baby,time.strftime('-%Y-%m-%d-%H-%M-%S', time.gmtime()))\n",
    "    print(model_name)\n",
    "    info = sage.describe_training_job(TrainingJobName=job_name)\n",
    "    model_data = info['ModelArtifacts']['S3ModelArtifacts']\n",
    "    print(model_data)\n",
    "    containers = {'us-west-2': '433757028032.dkr.ecr.us-west-2.amazonaws.com/image-classification:latest',\n",
    "                  'us-east-1': '811284229777.dkr.ecr.us-east-1.amazonaws.com/image-classification:latest',\n",
    "                  'us-east-2': '825641698319.dkr.ecr.us-east-2.amazonaws.com/image-classification:latest',\n",
    "                  'eu-west-1': '685385470294.dkr.ecr.eu-west-1.amazonaws.com/image-classification:latest'}\n",
    "    hosting_image = containers[boto3.Session().region_name]\n",
    "    primary_container = {\n",
    "        'Image': hosting_image,\n",
    "        'ModelDataUrl': model_data,\n",
    "    }\n",
    "\n",
    "    create_model_response = sage.create_model(\n",
    "        ModelName = model_name,\n",
    "        ExecutionRoleArn = role,\n",
    "        PrimaryContainer = primary_container)\n",
    "\n",
    "    print(create_model_response['ModelArn'])\n",
    "\n",
    "    #-----------------------------------------------------------\n",
    "    #ENDPOINT CONFIGURATION DETAILS\n",
    "\n",
    "    timestamp = time.strftime('-%Y-%m-%d-%H-%M-%S', time.gmtime())\n",
    "    endpoint_config_name = job_name_prefix + '-epc-' + timestamp\n",
    "    endpoint_config_response = sage.create_endpoint_config(\n",
    "        EndpointConfigName = endpoint_config_name,\n",
    "        ProductionVariants=[{\n",
    "            'InstanceType':'ml.m4.xlarge',\n",
    "            'InitialInstanceCount':1,\n",
    "            'ModelName':model_name,\n",
    "            'VariantName':'AllTraffic'}])\n",
    "\n",
    "    print('Endpoint configuration name: {}'.format(endpoint_config_name))\n",
    "    print('Endpoint configuration arn:  {}'.format(endpoint_config_response['EndpointConfigArn']))\n",
    "\n",
    "\n",
    "    #-----------------------------------------------------------\n",
    "    #CREATING THE ENDPOINT\n",
    "    timestamp = time.strftime('-%Y-%m-%d-%H-%M-%S', time.gmtime())\n",
    "    endpoint_name = job_name_prefix + '-ep-' + timestamp\n",
    "    print('Endpoint name: {}'.format(endpoint_name))\n",
    "\n",
    "    endpoint_params = {\n",
    "        'EndpointName': endpoint_name,\n",
    "        'EndpointConfigName': endpoint_config_name,\n",
    "    }\n",
    "    endpoint_response = sagemaker.create_endpoint(**endpoint_params)\n",
    "    print('EndpointArn = {}'.format(endpoint_response['EndpointArn']))\n",
    "\n",
    "    # get the status of the endpoint\n",
    "    response = sagemaker.describe_endpoint(EndpointName=endpoint_name)\n",
    "    status = response['EndpointStatus']\n",
    "    print('EndpointStatus = {}'.format(status))\n",
    "\n",
    "\n",
    "    # wait until the status has changed\n",
    "    sagemaker.get_waiter('endpoint_in_service').wait(EndpointName=endpoint_name)\n",
    "\n",
    "\n",
    "    # print the status of the endpoint\n",
    "    endpoint_response = sagemaker.describe_endpoint(EndpointName=endpoint_name)\n",
    "    status = endpoint_response['EndpointStatus']\n",
    "    print('Endpoint creation ended with EndpointStatus = {}'.format(status))\n",
    "\n",
    "    if status != 'InService':\n",
    "        raise Exception('Endpoint creation failed.')\n",
    "\n",
    "\n",
    "    runtime = boto3.Session().client(service_name='runtime.sagemaker')\n",
    "\n",
    "    \n",
    "    # CLEAN UP IN CASE OF LIMITED MODELS AND ENDPOINTS\n",
    "    #print(endpoint_name)\n",
    "    #sage.delete_endpoint(EndpointName=endpoint_name)\n",
    "    #sage.delete_endpoint_config(EndpointConfigName=endpoint_name)\n",
    "    #sage.delete_model(ModelName=endpoint_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "image-classification-nicu-2019-04-30-03-41-48-13\n",
      "Maximum validation accuracy: 1.000000 \n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import boto3\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.ticker as ticker\n",
    "import numpy as np\n",
    "\n",
    "#BUILD CURVE\n",
    "\n",
    "client = boto3.client('logs')\n",
    "\n",
    "lgn='/aws/sagemaker/TrainingJobs'\n",
    "print(job_name)\n",
    "# Update this with the actual name in CloudWatch logs\n",
    "lsn=job_name+'/'+'algo-1-1556595898'\n",
    "\n",
    "log=client.get_log_events(logGroupName=lgn, logStreamName=lsn)\n",
    "\n",
    "trn_accs=[]\n",
    "val_accs=[]\n",
    "for e in log['events']:\n",
    "  msg=e['message']\n",
    "  if 'Validation-accuracy' in msg:\n",
    "        val = msg.split(\"=\")\n",
    "        val = val[1]\n",
    "        val_accs.append(float(val))\n",
    "  if 'Train-accuracy' in msg:\n",
    "        trn = msg.split(\"=\")\n",
    "        trn = trn[1]\n",
    "        trn_accs.append(float(trn))\n",
    "\n",
    "print(\"Maximum validation accuracy: %f \" % max(val_accs))   \n",
    "plt.clf()\n",
    "fig, ax = plt.subplots()\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Accuracy')\n",
    "trn_plot, = ax.plot(range(epochs), trn_accs, label=\"Training accuracy\")\n",
    "val_plot, = ax.plot(range(epochs), val_accs, label=\"Validation accuracy\")\n",
    "plt.legend(handles=[trn_plot,val_plot])\n",
    "ax.yaxis.set_ticks(np.arange(0.4, 1.05, 0.05))\n",
    "ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%0.2f'))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "import time\n",
    "import boto3\n",
    "import re\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.ticker as ticker\n",
    "import json\n",
    "import os\n",
    "import numpy as np\n",
    "from sagemaker import get_execution_role\n",
    "from time import gmtime, strftime\n",
    "from IPython.display import Image\n",
    "\n",
    "# BUILD CONFUSION MATRIX\n",
    "\n",
    "baby = 'Kaylee'\n",
    "al = ['Arm', 'Leg']\n",
    "lr = ['Left', 'Right']\n",
    "\n",
    "A = np.zeros( (4, 4) )\n",
    "for lig in al:\n",
    "    for side in lr:\n",
    "        truth=side+lig\n",
    "        print(truth.lower())\n",
    "        if truth.lower() == 'leftarm':\n",
    "            row=0\n",
    "        elif truth.lower() == 'leftleg':\n",
    "            row=1\n",
    "        elif truth.lower() == 'rightarm':\n",
    "            row=2\n",
    "        elif truth.lower() == 'rightleg':\n",
    "            row=3\n",
    "        directory = 'cropped_1080_by_1080/{}/{}/{}/OpticalFlow'.format(baby, lig, side)\n",
    "        for filename in os.listdir(directory):\n",
    "            if filename.endswith(\".png\"):\n",
    "                testfile = directory+\"/\"+filename\n",
    "                with open(testfile, 'rb') as f:\n",
    "                    payload = f.read()\n",
    "                    payload = bytearray(payload)\n",
    "                response = boto3.Session().client(service_name='runtime.sagemaker').invoke_endpoint(EndpointName=endpoint_name, \n",
    "                                   ContentType='application/x-image', \n",
    "                                   Body=payload)\n",
    "                result = response['Body'].read()\n",
    "                # result will be in json format and convert it to ndarray\n",
    "                result = json.loads(result)\n",
    "                index = np.argmax(result)\n",
    "                \n",
    "                object_categories = ['leftarm', 'leftleg', 'rightarm', 'rightleg']\n",
    "                if object_categories[index] == 'leftarm':\n",
    "                    A[row][0] = A[row][0] + 1\n",
    "                if object_categories[index] == 'leftleg':\n",
    "                    A[row][1] = A[row][1] + 1\n",
    "                if object_categories[index] == 'rightarm':\n",
    "                    A[row][2] = A[row][2] + 1\n",
    "                if object_categories[index] == 'rightleg':\n",
    "                    A[row][3] = A[row][3] + 1\n",
    "                print(A) \n",
    "print(A) \n",
    "\n",
    "# 0 = la, 1 = ll, 2 = ra, 3 = rl\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "conda_mxnet_p36",
   "language": "python",
   "name": "conda_mxnet_p36"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
